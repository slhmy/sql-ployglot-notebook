#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"T-SQL","name":"sql-polyglot"}]}}

#!markdown

# The computer store

#!markdown

## Prerequisites setup

#!csharp

#r "nuget:Microsoft.DotNet.Interactive.SqlServer,*-*"

#!csharp

#!connect mssql --kernel-name polyglot "TrustServerCertificate=true; User ID=SA; Password=Password-123; Server=127.0.0.1,1433"

#!sql-polyglot

/* Enusre the database exists */
IF NOT EXISTS(SELECT * FROM sys.databases WHERE name = 'sql_polyglot')
BEGIN
  EXEC('CREATE DATABASE sql_polyglot');
END

#!markdown

## Relational Schema

![sechema](./images/computer-store-db.png)

Please note the datatypes given are SQLite datatypes.

PK and FK stand for primary key and foreign key respectively.

#!sql-polyglot

/* Prepare tables and data */
USE sql_polyglot;

/* If tables exist, delete foreign key constraints and drop them */
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Products')
BEGIN
	ALTER TABLE Products DROP CONSTRAINT fk_Manufacturers_Code;
	DROP TABLE Products;
END

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Manufacturers')
BEGIN
	DROP TABLE Manufacturers;
END

/* Create tables */
CREATE TABLE Manufacturers (
	Code INTEGER PRIMARY KEY NOT NULL,
	Name CHAR(50) NOT NULL 
);

CREATE TABLE Products (
	Code INTEGER PRIMARY KEY NOT NULL,
	Name CHAR(50) NOT NULL ,
	Price REAL NOT NULL ,
	Manufacturer INTEGER NOT NULL 
		CONSTRAINT fk_Manufacturers_Code REFERENCES Manufacturers(Code)
);

/* Insert data */
INSERT INTO Manufacturers(Code,Name) 
VALUES 
    (1,'Sony'),(2,'Creative Labs'),(3,'Hewlett-Packard'),(4,'Iomega'),(5,'Fujitsu'),
    (6,'Winchester');

INSERT INTO Products(Code,Name,Price,Manufacturer) 
VALUES
    (1,'Hard drive',240,5),(2,'Memory',120,6),(3,'ZIP drive',150,4),(4,'Floppy disk',5,6),
    (5,'Monitor',240,1),(6,'DVD drive',180,2),(7,'CD drive',90,2),(8,'Printer',270,3),
    (9,'Toner cartridge',66,3),(10,'DVD burner',180,2);

#!markdown

## Overview

This exercise shows how data is selected from table or tables using SQL queries,
while also show's some basic usage of inserting and updating data in tables.

### Tips

While inner joining tables, there are two ways to join tables.
One is using the `JOIN` keyword and the other is using the `,` operator.
Both are used to join tables but the `JOIN` keyword is preferred,
as it may helps DBMS to optimize the query.

#!markdown

## Exercises and Answers

#!markdown

### 1. Select the names of all the products in the store.

#!sql-polyglot

SELECT Name
	FROM Products;

#!markdown

### 2. Select the names and the prices of all the products in the store.

#!sql-polyglot

SELECT Name, Price
	FROM Products;

#!markdown

### 3. Select the name of the products with a price less than or equal to $200.

#!sql-polyglot

SELECT Name
	FROM Products WHERE Price <= 200;

#!markdown

### 4. Select all the products with a price between $60 and $120.

#!sql-polyglot

/* With AND */
SELECT *
	FROM Products
    WHERE Price >= 60 AND Price <= 120;

#!sql-polyglot

/* With BETWEEN */
SELECT *
	FROM Products
    WHERE Price BETWEEN 60 AND 120;

#!markdown

### 5. Select the name and price in cents (i.e., the price must be multiplied by 100).

#!sql-polyglot

/* Without AS */
SELECT Name, Price * 100
	FROM Products;

#!sql-polyglot

/* With AS */
SELECT Name, Price * 100 AS PriceCents
	FROM Products;

#!markdown

### 6. Compute the average price of all the products.

#!sql-polyglot

SELECT AVG(Price)
	FROM Products;

#!markdown

### 7. Compute the average price of all products with manufacturer code equal to 2.

#!sql

SELECT AVG(Price)
	FROM Products
	WHERE Manufacturer=2;

#!markdown

### 8. Compute the number of products with a price larger than or equal to $180.

#!sql-polyglot

SELECT COUNT(*)
	FROM Products WHERE Price >= 180;

#!markdown

### 9. Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).

#!sql-polyglot

SELECT Name, Price
	FROM Products
    WHERE Price >= 180
ORDER BY Price DESC, Name;

#!markdown

### 10. Select all the data from the products, including all the data for each product's manufacturer.

#!sql-polyglot

/* Without LEFT JOIN */
SELECT * 
	FROM Products, Manufacturers
	WHERE Products.Manufacturer = Manufacturers.Code;

#!sql-polyglot

/* With LEFT JOIN */
SELECT *
	FROM Products LEFT JOIN Manufacturers
		ON Products.Manufacturer = Manufacturers.Code;

#!markdown

### 11. Select the product name, price, and manufacturer name of all the products.

#!sql-polyglot

/* Without INNER JOIN */
SELECT Products.Name, Price, Manufacturers.Name
	FROM Products, Manufacturers
	WHERE Products.Manufacturer = Manufacturers.Code;

#!sql-polyglot

/* With INNER JOIN */
SELECT Products.Name, Price, Manufacturers.Name
	FROM Products INNER JOIN Manufacturers
		ON Products.Manufacturer = Manufacturers.Code;

#!markdown

### 12. Select the average price of each manufacturer's products, showing only the manufacturer's code.

#!sql-polyglot

SELECT AVG(Price), Manufacturer FROM Products
	GROUP BY Manufacturer;

#!markdown

### 13. Select the average price of each manufacturer's products, showing the manufacturer's name.

#!sql-polyglot

/* Without INNER JOIN */
SELECT AVG(Price), Manufacturers.Name
	FROM Products, Manufacturers
	WHERE Products.Manufacturer = Manufacturers.Code
	GROUP BY Manufacturers.Name;

#!sql-polyglot

/* With INNER JOIN */
SELECT AVG(Price), Manufacturers.Name
	FROM Products INNER JOIN Manufacturers
		ON Products.Manufacturer = Manufacturers.Code
	GROUP BY Manufacturers.Name;

#!markdown

### 14. Select the names of manufacturer whose products have an average price larger than or equal to $150.

#!sql-polyglot

/* Without INNER JOIN */
SELECT AVG(Price), Manufacturers.Name
	FROM Products, Manufacturers
	WHERE Products.Manufacturer = Manufacturers.Code
	GROUP BY Manufacturers.Name
		HAVING AVG(Price) >= 150;

#!sql-polyglot

/* With INNER JOIN */
SELECT AVG(Price), Manufacturers.Name
	FROM Products INNER JOIN Manufacturers
		ON Products.Manufacturer = Manufacturers.Code
	GROUP BY Manufacturers.Name
		HAVING AVG(Price) >= 150;

#!markdown

### 15. Select the name and price of the cheapest product.

#!sql-polyglot

SELECT name,price
	FROM Products
	ORDER BY price ASC
	LIMIT 1

#!sql-polyglot

/* With a nested SELECT */
/* WARNING: If there is more than one item with the cheapest price it will select them both */
SELECT Name, Price
	FROM Products
	WHERE Price = (SELECT MIN(Price) FROM Products);

#!markdown

### 16. Select the name of each manufacturer along with the name and price of its most expensive product.

#!sql-polyglot

/* With a nested SELECT and without INNER JOIN */
SELECT A.Name, A.Price, F.Name
	FROM Products A, Manufacturers F
	WHERE A.Manufacturer = F.Code
		AND A.Price = (
		SELECT MAX(A.Price)
			FROM Products A
			WHERE A.Manufacturer = F.Code
		);

#!sql-polyglot

/* With a nested SELECT and an INNER JOIN */
SELECT A.Name, A.Price, F.Name
	FROM Products A INNER JOIN Manufacturers F
		ON A.Manufacturer = F.Code AND A.Price = (
		SELECT MAX(A.Price)
			FROM Products A
			WHERE A.Manufacturer = F.Code
		);

#!markdown

### 17. Select the name of each manufacturer which have an average price above $145 and contain at least 2 different products.

#!sql-polyglot

SELECT m.Name, Avg(p.price) as p_price, COUNT(p.Manufacturer) as m_count
	FROM Manufacturers m, Products p
	WHERE p.Manufacturer = m.code
	GROUP BY m.Name , p.Manufacturer
		HAVING Avg(p.price) >= 150 and COUNT(p.Manufacturer) >= 2;

#!markdown

### 18. Add a new product: Loudspeakers, $70, manufacturer 2.

#!sql-polyglot

INSERT INTO Products( Code, Name , Price , Manufacturer)
	VALUES ( 11, 'Loudspeakers' , 70 , 2 );

#!markdown

### 19. Update the name of product 8 to "Laser Printer".

#!sql-polyglot

UPDATE Products
	SET Name = 'Laser Printer'
	WHERE Code = 8;

#!markdown

### 20. Apply a 10% discount to all products.

#!sql-polyglot

UPDATE Products
	SET Price = Price - (Price * 0.1);

#!markdown

### 21. Apply a 10% discount to all products with a price larger than or equal to $120.

#!sql-polyglot

UPDATE Products
	SET Price = Price - (Price * 0.1)
	WHERE Price >= 120;
